<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
    <title>Sharp Turn Detector</title>
    <script>
        L_NO_TOUCH = false;
        L_DISABLE_3D = false;
    </script>
    <style>
        html, body { width: 100%; height: 100%; margin: 0; padding: 0; }
        #map { position: absolute; top: 50px; bottom: 0; right: 0; left: 0; }
        #input-container { position: absolute; top: 10px; left: 10px; z-index: 1000; background: white; padding: 10px; border: 1px solid #ccc; }
        #loading { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 1001; background: rgba(255, 255, 255, 0.8); padding: 20px; border-radius: 5px; display: none; }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css" />
</head>
<body>
    <div id="input-container">
        <label for="startLat">Start Latitude:</label>
        <input type="text" id="startLat" value="22.0835"><br>
        <label for="startLng">Start Longitude:</label>
        <input type="text" id="startLng" value="88.0360"><br>
        <label for="endLat">End Latitude:</label>
        <input type="text" id="endLat" value="22.0815"><br>
        <label for="endLng">End Longitude:</label>
        <input type="text" id="endLng" value="88.0350"><br>
        <button onclick="calculateRoute()">Calculate Route</button>
    </div>
    <div id="loading">Loading...</div>
    <div id="map"></div>

    <script>
        var map = L.map('map', {
            center: [22.082268, 88.035415],
            zoom: 12,
            zoomControl: true,
        });

        L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
            attribution: "&copy; <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors"
        }).addTo(map);

        var riskGroup = L.featureGroup().addTo(map);

        async function calculateRoute() {
            document.getElementById('loading').style.display = 'block';
            riskGroup.clearLayers();

            var startLat = parseFloat(document.getElementById('startLat').value);
            var startLng = parseFloat(document.getElementById('startLng').value);
            var endLat = parseFloat(document.getElementById('endLat').value);
            var endLng = parseFloat(document.getElementById('endLng').value);

            if (isNaN(startLat) || isNaN(startLng) || isNaN(endLat) || isNaN(endLng)) {
                alert("Please enter valid coordinates.");
                document.getElementById('loading').style.display = 'none';
                return;
            }

            try {
                const response = await fetch(`https://router.project-osrm.org/route/v1/driving/${startLng},${startLat};${endLng},${endLat}?overview=full&geometries=geojson`);
                const data = await response.json();

                if (data.routes && data.routes.length > 0) {
                    const routeCoordinates = data.routes[0].geometry.coordinates.map(coord => [coord[1], coord[0]]);

                    L.polyline(routeCoordinates, { color: 'blue', weight: 3 }).addTo(map);

                    const sharpTurns = findSharpTurns(routeCoordinates);

                    sharpTurns.forEach(turn => {
                        L.marker(turn.coord, {
                            icon: L.AwesomeMarkers.icon({
                                icon: "exclamation", markerColor: "red", prefix: "fa"
                            })
                        }).bindPopup(`<b>Sharp Turn</b><br>Angle: ${turn.angle.toFixed(1)}Â°<br>Recommended Speed: 10-15 km/hr`).addTo(riskGroup);
                    });

                    if(sharpTurns.length > 0){
                        map.fitBounds(riskGroup.getBounds());
                    }
                    else{
                        map.fitBounds(L.polyline(routeCoordinates).getBounds());
                    }

                } else {
                    alert("Route not found.");
                }

            } catch (error) {
                console.error("Error calculating route:", error);
                alert("An error occurred while calculating the route.");
            } finally {
                document.getElementById('loading').style.display = 'none';
            }
        }

        function findSharpTurns(coordinates) {
            const sharpTurns = [];
            for (let i = 1; i < coordinates.length - 1; i++) {
                const angle = calculateAngle(coordinates[i - 1], coordinates[i], coordinates[i + 1]);
                if (angle < 90) {
                    sharpTurns.push({ coord: coordinates[i], angle: angle });
                }
            }
            return sharpTurns;
        }

        function calculateAngle(latlng1, latlng2, latlng3) {
            const toRadians = (deg) => deg * (Math.PI / 180);
            const toDegrees = (rad) => rad * (180 / Math.PI);

            const bearing1 = Math.atan2(
                Math.sin(toRadians(latlng2[1] - latlng1[1])) * Math.cos(toRadians(latlng2[0])),
                Math.cos(toRadians(latlng1[0])) * Math.sin(toRadians(latlng2[0])) -
                Math.sin(toRadians(latlng1[0])) * Math.cos(toRadians(latlng2[0])) *
                Math.cos(toRadians(latlng2[1] - latlng1[1]))
            );

            const bearing2 = Math.atan2(
                Math.sin(toRadians(latlng3[1] - latlng2[1])) * Math.cos(toRadians(latlng3[0])),
                Math.cos(toRadians(latlng2[0])) * Math.sin(toRadians(latlng3[0])) -
                Math.sin(toRadians(latlng2[0])) * Math.cos(toRadians(latlng3[0])) *
                Math.cos(toRadians(latlng3[1] - latlng2[1]))
            );

            const angle = toDegrees((bearing2 - bearing1 + 2 * Math.PI) % (2 * Math.PI));
            return angle > 180 ? 360 - angle : angle;
        }
    </script>
</body>
</html>
